# Example GitHub Actions workflow for deploying to AWS App Runner
# Using OIDC (OpenID Connect) - No AWS credentials stored in GitHub!

name: Deploy to AWS App Runner

on:
  push:
    branches:
      - main
      - iac
  pull_request:
    branches:
      - main
  workflow_dispatch:

# Required for OIDC authentication
permissions:
  id-token: write   # Allows the workflow to request an OIDC token
  contents: read    # Allows reading the repository contents

env:
  AWS_REGION: us-east-1
  TERRAFORM_DIR: terraform

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-TerraformPlan

      - name: Verify AWS identity
        run: aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        id: init
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          WORKSPACE="default"
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            WORKSPACE="prod"
          elif [[ "${{ github.ref_name }}" == "develop" ]]; then
            WORKSPACE="dev"
          fi

          terraform init \
            -backend-config="bucket=tf-state-acrn-dev" \
            -backend-config="key=${WORKSPACE}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=tf-lock-acrn"

      - name: Select Terraform Workspace
        id: workspace
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            terraform workspace select prod
          elif [[ "${{ github.ref_name }}" == "develop" ]]; then
            terraform workspace select dev
          fi

      - name: Terraform Format Check
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            terraform plan -no-color -var-file="prod.tfvars"
          elif [[ "${{ github.ref_name }}" == "develop" ]]; then
            terraform plan -no-color -var-file="dev.tfvars"
          fi
        continue-on-error: true

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    # Only run on main branch and not on pull requests
    if: (github.ref_name == 'main' || github.ref_name == 'develop') && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-TerraformApply

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init and Select Workspace
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          WORKSPACE="default"
          VAR_FILE=""
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            WORKSPACE="prod"
          elif [[ "${{ github.ref_name }}" == "develop" ]]; then
            WORKSPACE="dev"
          fi

          terraform init \
            -backend-config="bucket=tf-state-acrn-dev" \
            -backend-config="key=${WORKSPACE}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=tf-lock-acrn"

          terraform workspace select $WORKSPACE

      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          VAR_FILE=""
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            VAR_FILE="-var-file=prod.tfvars"
          elif [[ "${{ github.ref_name }}" == "develop" ]]; then
            VAR_FILE="-var-file=dev.tfvars"
          fi
          
          terraform apply -auto-approve $VAR_FILE

      - name: Output App URL
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform output app_url

# ============================================================================
# Setup Instructions:
# ============================================================================
# 
# 1. Enable GitHub Actions OIDC in your Terraform:
#    
#    In terraform.tfvars, add:
#    enable_github_actions_oidc = true
#    github_repo                = "your-username/acrn-react"
#
# 2. Run terraform apply to create the OIDC provider and role
#
# 3. Get the role ARN:
#    terraform output github_actions_role_arn
#
# 4. Add the ARN as a GitHub secret:
#    - Go to: Settings > Secrets and variables > Actions
#    - Click "New repository secret"
#    - Name: AWS_ROLE_ARN
#    - Value: (paste the ARN from step 3)
#
# 5. Copy this file to: .github/workflows/deploy.yml
#
# 6. Commit and push - the workflow will run automatically!
#
# ============================================================================
# Security Benefits:
# ============================================================================
#
# ✅ No AWS credentials stored in GitHub
# ✅ Temporary credentials (auto-expire)
# ✅ Fine-grained permissions via IAM role
# ✅ Auditable via CloudTrail
# ✅ Can't be leaked or stolen
# ✅ Automatically rotated every workflow run
#
# ============================================================================

